{"version":3,"file":"use-toast.js","sources":["../../../src/primitives/toast/use-toast.tsx"],"sourcesContent":["'use client'\n\nimport * as React from 'react'\n\nimport type { ToastActionElement, ToastProps } from './toast'\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: 'ADD_TOAST',\n  UPDATE_TOAST: 'UPDATE_TOAST',\n  DISMISS_TOAST: 'DISMISS_TOAST',\n  REMOVE_TOAST: 'REMOVE_TOAST',\n} as const\n\nlet count = 0\n\n/**\n * This function generates a unique id for a toast.\n * @returns  A unique id for a toast.\n */\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType['ADD_TOAST']\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType['UPDATE_TOAST']\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType['DISMISS_TOAST']\n      toastId?: ToasterToast['id'] | undefined\n    }\n  | {\n      type: ActionType['REMOVE_TOAST']\n      toastId?: ToasterToast['id'] | undefined\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: 'REMOVE_TOAST',\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'ADD_TOAST':\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case 'UPDATE_TOAST':\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t,\n        ),\n      }\n\n    case 'DISMISS_TOAST': {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      }\n    }\n    case 'REMOVE_TOAST':\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: ((state: State) => void)[] = []\n\nlet memoryState: State = { toasts: [] }\n\n/**\n * Dispatches an action to the toast reducer and notifies all listeners.\n * @param action The action to dispatch.\n */\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\nexport type ToastArgs = Omit<ToasterToast, 'id'>\n\n/**\n * A function that creates and displays a toast.\n * @param args The props for the toast.\n * @returns An object with the id of the toast and functions to dismiss or update the toast.\n */\nfunction toast({ ...props }: ToastArgs) {\n  const id = genId()\n\n  const update = (props: ToasterToast) => {\n    dispatch({\n      type: 'UPDATE_TOAST',\n      toast: { ...props, id },\n    })\n  }\n  const dismiss = () => {\n    dispatch({ type: 'DISMISS_TOAST', toastId: id })\n  }\n\n  dispatch({\n    type: 'ADD_TOAST',\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) {\n          dismiss()\n        }\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\n/**\n * A hook that provides the current state of the toasts and functions to create and dismiss toasts.\n * @returns The current state of the toasts, the toast function and a dismiss function.\n */\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => {\n      dispatch({ type: 'DISMISS_TOAST', toastId })\n    },\n  }\n}\n\nexport { useToast, toast }\n"],"names":[],"mappings":";;AAMA;AAiBA;AAMA;AACW;AAEX;AA0BA;AAGM;AACF;AAGI;AACJ;AACS;AACD;AACN;AACD;AAGW;AAChB;AAGE;AAAqB;AAEV;AAAA;AACF;AACyD;AAAA;AAIvD;AAAA;AACF;AACkB;AACoC;AACzD;AAAA;AAII;AAIN;AAII;AAAyB;AAItB;AACF;AACkB;AAEf;AACK;AACG;AAER;AACN;AAAA;AAEJ;AAEM;AACK;AACF;AACM;AAGN;AACF;AACuD;AAAA;AAGlE;AAIA;AAMA;AACgB;AAEZ;AAAoB;AAExB;AASA;AACE;AAGW;AAAA;AACD;AACgB;AACvB;AAGD;AAA+C;AAGxC;AAAA;AACD;AACC;AACF;AACH;AACM;AAEJ;;AAGF;AACF;AAGK;AACL;AACA;AACA;AAEJ;AAMA;AACE;AAEA;AAGU;AACN;AAC2B;AAKxB;AACF;AACH;AAEE;AAA2C;AAC7C;AAEJ;;;;;;"}