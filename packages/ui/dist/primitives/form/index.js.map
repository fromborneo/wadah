{"version":3,"file":"index.js","sources":["../../../src/primitives/form/index.tsx"],"sourcesContent":["'use client'\n\nimport * as React from 'react'\n\nimport type * as LabelPrimitive from '@radix-ui/react-label'\nimport type { ControllerProps, FieldPath, FieldValues } from 'react-hook-form'\n\nimport { Slot } from '@radix-ui/react-slot'\nimport { Controller, FormProvider, useFormContext } from 'react-hook-form'\n\nimport { Label } from '@/primitives/label'\nimport { cn } from '@/utils/cn'\n\nconst Form = FormProvider\n\ninterface FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue,\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  if (!fieldContext) {\n    throw new Error('useFormField should be used within <FormField>')\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ninterface FormItemContextValue {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue,\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn('space-y-2', className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = 'FormItem'\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && 'text-destructive', className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = 'FormLabel'\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error ? formDescriptionId : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = 'FormControl'\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn('text-[0.8rem] text-muted-foreground', className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = 'FormDescription'\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn('text-[0.8rem] font-medium text-destructive', className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = 'FormMessage'\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"],"names":["FormItem","FormLabel","FormControl","FormDescription","FormMessage"],"mappings":";;;;;;;AAaA;AAS+B;AAE/B;AAKE;AAEF;AASQ;AAON;AACQ;AAGF;AAEC;AAAA;AACL;AACmB;AACF;AACO;AACJ;AACjB;AAEP;AAM8B;AAE9B;AAMQ;AAEN;AAKF;AACAA;AAEM;AAIJ;AAGE;AAAA;AAAC;AAAA;AACC;AACoD;AAC3C;AACL;AAAA;AAGV;AACAC;AAEM;AAIJ;AAGE;AAAA;AAAC;AAAA;AACC;AACI;AAEO;AAEK;AACZ;AAAA;AAGV;AACAC;AAEM;AAIE;AAGJ;AAAA;AAAC;AAAA;AACC;AACI;AAC0D;AAC1D;AAAA;AAGV;AACAC;AAEM;AAIJ;AAGA;AAKE;AAAC;AAAA;AACC;AACI;AACiE;AACjE;AAEH;AAAA;AAGP;AACAC;;;;;;;;;;;"}